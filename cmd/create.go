/*
Copyright ¬© 2025 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"text/template"

	"github.com/spf13/cobra"
)

// createCmd represents the create command
var createCmd = &cobra.Command{
	Use:   "create [name]",
	Short: "Create a new Go REST API project",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		projectName := args[0]
		fmt.Println("üìÅ Creating Go REST API project:", projectName)

		dirs := []string{
			"cmd",
			"internal/handler",
			"internal/service",
			"internal/repository",
			"internal/domain",
			"internal/common",
		}

		for _, dir := range dirs {
			fullPath := filepath.Join(projectName, dir)
			if err := os.MkdirAll(fullPath, 0755); err != nil {
				fmt.Println("‚ùå Failed to create directory:", fullPath)
				return
			}
		}

		writeFileFromTemplate := func(path, tmplStr string, data any) {
			tmpl := template.Must(template.New("").Parse(tmplStr))
			file, err := os.Create(path)
			if err != nil {
				fmt.Println("‚ùå Failed to create file:", path)
				return
			}
			defer file.Close()
			if err := tmpl.Execute(file, data); err != nil {
				fmt.Println("‚ùå Failed to render template for", path)
			}
		}

		// main.go
		mainPath := filepath.Join(projectName, "cmd", "main.go")
		writeFileFromTemplate(mainPath, mainTemplate, projectName)

		// go.mod
		goModContent := fmt.Sprintf(`module %s

go 1.20

require (
       github.com/gin-gonic/gin v1.10.0
       github.com/swaggo/files v1.0.1
       github.com/swaggo/gin-swagger v1.6.0
       gorm.io/gorm v1.25.6
       gorm.io/driver/mysql v1.5.2
)
`, projectName)
		goModPath := filepath.Join(projectName, "go.mod")
		os.WriteFile(goModPath, []byte(goModContent), 0644)

		// response.go
		responsePath := filepath.Join(projectName, "internal", "common", "response.go")
		os.WriteFile(responsePath, []byte(responseCode), 0644)

		// errors.go
		errorsPath := filepath.Join(projectName, "internal", "common", "errors.go")
		os.WriteFile(errorsPath, []byte(errorsCode), 0644)

		// db.go
		dbPath := filepath.Join(projectName, "internal", "common", "db.go")
		os.WriteFile(dbPath, []byte(dbCode), 0644)

		// handler/user_handler.go
		handlerPath := filepath.Join(projectName, "internal", "handler", "user_handler.go")
		writeFileFromTemplate(handlerPath, handlerTemplate, projectName)

		// service/user_service.go
		servicePath := filepath.Join(projectName, "internal", "service", "user_service.go")
		writeFileFromTemplate(servicePath, serviceTemplate, projectName)

		// domain/user.go
		domainPath := filepath.Join(projectName, "internal", "domain", "user.go")
		os.WriteFile(domainPath, []byte(domainCode), 0644)

		// repository/user_repository.go
		repoPath := filepath.Join(projectName, "internal", "repository", "user_repository.go")
		os.WriteFile(repoPath, []byte(repoCode), 0644)

		// Run go get and swag init
		runCmd := func(name string, args ...string) {
			cmd := exec.Command(name, args...)
			cmd.Dir = projectName
			cmd.Stdout = os.Stdout
			cmd.Stderr = os.Stderr
			if err := cmd.Run(); err != nil {
				fmt.Printf("‚ùå Failed to run %s %v: %v\n", name, args, err)
			}
		}

		runCmd("go", "install", "github.com/swaggo/swag/cmd/swag@latest")
		runCmd("swag", "init", "-g", "cmd/main.go")
		runCmd("go", "get", "-u", "github.com/swaggo/gin-swagger")
		runCmd("go", "get", "-u", "github.com/swaggo/files")
		runCmd("go", "get", "-u", "gorm.io/gorm")
		runCmd("go", "get", "-u", "gorm.io/driver/mysql")
		runCmd("go", "mod", "tidy")

		fmt.Println("‚úÖ Project created successfully.")
		fmt.Println("üì¶ Swagger ÏÑ§Ï†ïÏù¥ Ìè¨Ìï®ÎêòÏóàÏäµÎãàÎã§.")
		fmt.Println("üëâ Ïã§Ìñâ:")
		fmt.Println("‚Üí go run cmd/main.go")
		fmt.Println("‚Üí Í∑∏Îü∞ Îã§Ïùå http://localhost:8080/swagger/index.html Î°ú Ï†ëÏÜçÌï¥Î≥¥ÏÑ∏Ïöî")
	},
}

func init() {
	rootCmd.AddCommand(createCmd)
}

// ÌÖúÌîåÎ¶ø Î¨∏ÏûêÏó¥Îì§
var mainTemplate = `package main

import (
        "github.com/gin-gonic/gin"
        "github.com/swaggo/files"
        "github.com/swaggo/gin-swagger"
        "os"
        "{{.}}/internal/common"
        "{{.}}/internal/domain"
        "{{.}}/internal/handler"
        _ "{{.}}/docs"
)

// @title {{.}} API
// @version 1.0
// @description Generated by gogen
// @host localhost:8080
// @BasePath /
func main() {
        if err := common.InitDB(); err != nil {
                panic(err)
        }

        // Auto migrate domain models
        common.DB.AutoMigrate(&domain.User{})

        r := gin.Default()

	r.GET("/users", handler.GetUsers)
	r.POST("/users", handler.CreateUser)
	r.PUT("/users/:id", handler.UpdateUser)
	r.DELETE("/users/:id", handler.DeleteUser)

        r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

        cert := os.Getenv("SSL_CERT_FILE")
        key := os.Getenv("SSL_KEY_FILE")
        if cert != "" && key != "" {
                r.RunTLS(":8080", cert, key)
        } else {
                r.Run(":8080")
        }
}
`

var handlerTemplate = `package handler

import (
	"net/http"
	"{{.}}/internal/common"
	"{{.}}/internal/domain"
	"{{.}}/internal/service"
	"github.com/gin-gonic/gin"
)

// GetUsers godoc
// @Summary Get all users
// @Description Retrieves a list of all users
// @Tags users
// @Produce json
// @Success 200 {array} domain.User
// @Router /users [get]
func GetUsers(c *gin.Context) {
	users := service.GetUsers()
	common.JSON(c, http.StatusOK, users)
}

// CreateUser godoc
// @Summary Create a new user
// @Description Creates a user with JSON payload
// @Tags users
// @Accept json
// @Produce json
// @Param user body domain.User true "User data"
// @Success 201 {object} domain.User
// @Router /users [post]
func CreateUser(c *gin.Context) {
	var user domain.User
	if err := c.ShouldBindJSON(&user); err != nil {
		common.Error(c, http.StatusBadRequest, common.ErrInvalidInput.Error())
		return
	}
	saved := service.CreateUser(user)
	common.JSON(c, http.StatusCreated, saved)
}

// UpdateUser godoc
// @Summary Update a user
// @Description Updates a user by ID
// @Tags users
// @Produce json
// @Param id path string true "User ID"
// @Success 200 {object} map[string]interface{}
// @Router /users/{id} [put]
func UpdateUser(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		common.Error(c, http.StatusBadRequest, "id is required")
		return
	}
	common.JSON(c, http.StatusOK, gin.H{"id": id, "updated": true})
}

// DeleteUser godoc
// @Summary Delete a user
// @Description Deletes a user by ID
// @Tags users
// @Produce json
// @Param id path string true "User ID"
// @Success 200 {object} map[string]interface{}
// @Router /users/{id} [delete]
func DeleteUser(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		common.Error(c, http.StatusBadRequest, "id is required")
		return
	}
	common.JSON(c, http.StatusOK, gin.H{"id": id, "deleted": true})
}
`

var serviceTemplate = `package service

import (
        "{{.}}/internal/common"
        "{{.}}/internal/domain"
)

func GetUsers() []domain.User {
        var users []domain.User
        common.DB.Find(&users)
        return users
}

func CreateUser(u domain.User) domain.User {
        common.DB.Create(&u)
        return u
}
`

var domainCode = `package domain

type User struct {
	ID    int    ` + "`json:\"id\"`" + `
	Name  string ` + "`json:\"name\"`" + `
	Email string ` + "`json:\"email\"`" + `
}
`

var repoCode = `package repository

// TODO: implement user repository
`

var responseCode = `package common

import "github.com/gin-gonic/gin"

type ApiResponse struct {
	Success bool        ` + "`json:\"success\"`" + `
	Message string      ` + "`json:\"message,omitempty\"`" + `
	Data    interface{} ` + "`json:\"data,omitempty\"`" + `
	Error   string      ` + "`json:\"error,omitempty\"`" + `
}

func JSON(c *gin.Context, status int, data interface{}) {
	c.JSON(status, ApiResponse{
		Success: status < 400,
		Data:    data,
	})
}

func Error(c *gin.Context, status int, errMsg string) {
	c.JSON(status, ApiResponse{
		Success: false,
		Error:   errMsg,
	})
}
`

var errorsCode = `package common

import "errors"

var (
	ErrInvalidInput = errors.New("invalid input")
	ErrNotFound     = errors.New("not found")
	ErrServer       = errors.New("internal server error")
)
`

var dbCode = `package common

import (
        "os"

        "gorm.io/driver/mysql"
        "gorm.io/gorm"
)

var DB *gorm.DB

func InitDB() error {
        dsn := os.Getenv("DB_DSN")
        if dsn == "" {
                dsn = "user:password@tcp(localhost:3306)/app?charset=utf8mb4&parseTime=True&loc=Local"
        }
        var err error
        DB, err = gorm.Open(mysql.Open(dsn), &gorm.Config{})
        return err
}
`
